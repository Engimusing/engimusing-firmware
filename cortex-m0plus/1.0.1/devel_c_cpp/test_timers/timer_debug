#include "Arduino.h"
#include "test.h"
#include "em_cmu.h"

extern LEUARTClass Serial;


void print_timer_regs(int timer)
{
  TIMER_TypeDef *TIMER;

  if(timer == 0) {
    if((CMU->HFPERCLKEN0 & CMU_HFPERCLKEN0_TIMER0) == 0) {
      delay(2); Serial.println("Enabled TIMER0 clock - You may want to do this in your code");
      CMU_ClockEnable(cmuClock_TIMER0, true);
    }
    TIMER = TIMER0;
  } else if(timer == 1) {
    if((CMU->HFPERCLKEN0 & CMU_HFPERCLKEN0_TIMER1) == 0) {
      delay(2); Serial.println("Enabled TIMER1 clock - You may want to do this in your code");
      CMU_ClockEnable(cmuClock_TIMER1, true);
    }
    TIMER = TIMER1;
  } else {
    delay(2); Serial.print("Invalid Timer = "); Serial.println(timer);
  }

  uint32_t timer_freq = CMU_ClockFreqGet(cmuClock_HFPER);
  delay(2); Serial.print("Timer Frequency HFPER Clock = "); Serial.println(timer_freq);

  delay(2); Serial.println("");
  delay(2); Serial.print("TIMER"); Serial.print(timer); Serial.println(" Registers:"); delay(1);
  delay(2); Serial.print(" CTRL   = "); Serial.println(TIMER->CTRL,HEX); delay(1);
  delay(2); Serial.print(" CMD    = "); Serial.println(TIMER->CMD,HEX); delay(1);
  delay(2); Serial.print(" STATUS = "); Serial.println(TIMER->STATUS,HEX); delay(1);
  delay(2); Serial.print(" IEN    = "); Serial.println(TIMER->IEN,HEX); delay(1);
  delay(2); Serial.print(" IF     = "); Serial.println(TIMER->IF,HEX); delay(1);
  delay(2); Serial.print(" IFS    = "); Serial.println(TIMER->IFS,HEX); delay(1);
  delay(2); Serial.print(" IFC    = "); Serial.println(TIMER->IFC,HEX); delay(1);
  delay(2); Serial.print(" TOP    = "); Serial.println(TIMER->TOP,HEX); delay(1);
  delay(2); Serial.print(" TOPB   = "); Serial.println(TIMER->TOPB,HEX); delay(1);
  delay(2); Serial.print(" CNT    = "); Serial.println(TIMER->CNT,HEX); delay(1);
  delay(2); Serial.print(" ROUTE  = "); Serial.println(TIMER->ROUTE,HEX); delay(1);
  delay(2); Serial.println("");

  delay(2); Serial.print(" CC[0].CTRL = "); Serial.print(TIMER->CC[0].CTRL,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[1].CTRL = "); Serial.print(TIMER->CC[1].CTRL,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[2].CTRL = "); Serial.println(TIMER->CC[2].CTRL,HEX); delay(1);

  delay(2); Serial.print(" CC[0].CCV  = ");  Serial.print(TIMER->CC[0].CCV,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[1].CCV  = ");  Serial.print(TIMER->CC[1].CCV,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[2].CCV  = ");  Serial.println(TIMER->CC[2].CCV,HEX); delay(1);

  delay(2); Serial.print(" CC[0].CCVP = "); Serial.print(TIMER->CC[0].CCVP,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[1].CCVP = "); Serial.print(TIMER->CC[1].CCVP,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[2].CCVP = "); Serial.println(TIMER->CC[2].CCVP,HEX); delay(1);

  delay(2); Serial.print(" CC[0].CCVB = "); Serial.print(TIMER->CC[0].CCVB,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[1].CCVB = "); Serial.print(TIMER->CC[1].CCVB,HEX); delay(1);
  delay(2); Serial.print("\t\tCC[2].CCVB = "); Serial.println(TIMER->CC[2].CCVB,HEX); delay(1);

  Serial.println("");
}

